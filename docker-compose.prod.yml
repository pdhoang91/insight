services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - application
    networks:
      - app-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d www.insight.io.vn -d insight.io.vn

  db:
    image: postgres:13
    container_name: database
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    # Remove external port exposure for security
    # ports:
    #   - "5433:5432"

  application:
    container_name: application
    build:
      context: ./backend/application
      cache_from:
        - golang:1.23-alpine
        - alpine:3.19
      target: runner
    expose:
      - "81"
    volumes:
      - ./backend/application/uploads:/app/uploads
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-postgres}
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL}
      - BASE_SEARCH_API_URL=http://search_service:83
      - BASE_API_URL=${BASE_API_URL}
      - BASE_FE_URL=${BASE_FE_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:-}
    networks:
      - app-network
    restart: unless-stopped

  search-service:
    container_name: search_service
    build:
      context: ./backend/search-service
      cache_from:
        - golang:1.23-alpine
        - alpine:3.19
      target: runner
    expose:
      - "83"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-postgres}
      - BASE_API_URL=${BASE_API_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      cache_from:
        - node:22-alpine
      target: runner
      args:
        - NEXT_PUBLIC_BASE_API_URL=${NEXT_PUBLIC_BASE_API_URL}
        - NEXT_PUBLIC_BASE_FE_URL=${NEXT_PUBLIC_BASE_FE_URL}
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_BASE_API_URL=${NEXT_PUBLIC_BASE_API_URL}
      - NEXT_PUBLIC_BASE_FE_URL=${NEXT_PUBLIC_BASE_FE_URL}
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
