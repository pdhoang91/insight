
services:
#  nginx:
#    image: nginx:latest
#    container_name: nginx_proxy
#    ports:
#      - "80:80"        # HTTP for development and production
#      - "443:443"      # HTTPS for production
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
#      - ./nginx/certs:/etc/nginx/certs:ro                  # SSL certificates (optional)
#      - ./certbot/www:/var/www/certbot:ro                  # Let's Encrypt ACME challenge
#    depends_on:
#      - frontend
#      - application
#      - search-service
#    networks:
#      - app-network

  # Certbot service for SSL certificate management
#  certbot:
#    image: certbot/certbot:latest
#    container_name: certbot
#    volumes:
#      - ./certbot/conf:/etc/letsencrypt
#      - ./certbot/www:/var/www/certbot
#    # This service runs on-demand, not continuously
#    command: echo "Certbot service ready for SSL certificate operations"
#    networks:
#      - app-network

  db:
    image: postgres:13
    container_name: database
    restart: always
    # depends_on:
    #   - fluentd
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5433:5432" # Cổng này chỉ để truy cập từ host, không cần thiết cho kết nối giữa các container
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s

  application:
    container_name: application
    build:
      context: ./backend/application
      cache_from:
        - golang:1.23-alpine
        - alpine:3.19
      target: runner
    expose:                           # Internal port only, accessed via nginx
      - "81:81"
    ports:                           # Internal port only, accessed via nginx
      - "81:81"
    volumes:
      - ./backend/application/uploads:/app/uploads  # Mount thư mục uploads của backend
    depends_on:
      db:
        condition: service_healthy
      #- fluentd
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres

      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL}
      - BASE_SEARCH_API_URL=http://search_service:83
      - BASE_API_URL=${BASE_API_URL}
      - BASE_FE_URL=${BASE_FE_URL}
      - BASE_API_URL=${BASE_API_URL}
      - LOG_LEVEL=DEBUG
      
      # AWS S3 Configuration (migrated from image-service)
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # AWS_SESSION_TOKEN only needed for temporary credentials
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:-}
    networks:
      - app-network
    # logging:
    #   driver: "fluentd"
    #   options:
    #     fluentd-address: localhost:24224
    #     tag: docker.application


  search-service:
    container_name: search_service
    build:
      context: ./backend/search-service
      cache_from:
        - golang:1.23-alpine
        - alpine:3.19
      target: runner
    expose:                           # Internal port only, accessed via nginx
      - "83:83"
    ports:                           # Internal port only, accessed via nginx
      - "83:83"
    # volumes:
    #   - ./search-service/images:/app/images/uploads  # Mount thư mục uploads của image-service
    depends_on:
      db:
        condition: service_healthy
      #- fluentd
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres

      - BASE_API_URL=${BASE_API_URL}
      - logger.level=debug
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - LOG_LEVEL=DEBUG
    networks:
      - app-network
    # logging:
    #   driver: "fluentd"
    #   options:
    #     fluentd-address: localhost:24224
    #     tag: docker.search_service


  frontend:
    container_name: frontend
    build:
      context: ./frontend
      cache_from:
        - node:22-alpine
      target: runner
      args:
        - NEXT_PUBLIC_BASE_API_URL=${NEXT_PUBLIC_BASE_API_URL}
        - NEXT_PUBLIC_BASE_FE_URL=${NEXT_PUBLIC_BASE_FE_URL}
    expose:                           # Internal port only, accessed via nginx
      - "3000:3000"
    ports:
       - "3000:3000"                     # Disabled - access via nginx only
    environment:
      - NEXT_PUBLIC_BASE_API_URL=${NEXT_PUBLIC_BASE_API_URL}
      - NEXT_PUBLIC_BASE_FE_URL=${NEXT_PUBLIC_BASE_FE_URL}
    # depends_on:
    #   - fluentd
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  grafana-data:
